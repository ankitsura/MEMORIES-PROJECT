{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst postSlice = createSlice({\n  name: 'postSlice',\n  initialState,\n  reducers: {\n    FETCH_ALL(state, action) {\n      return action.payload;\n    },\n    CREATE(state, action) {\n      return [state, action.payload];\n    },\n    UPDATE(state, action) {\n      return state.filter(post => post._id !== action.payload);\n    },\n    DELETE(state, action) {\n      return state.map(post => post._id === action.payload._id ? action.payload : state);\n    },\n    LIKE_POST(state, action) {\n      return state.posts.map(post => post._id === action.payload._id ? action.payload : state);\n    }\n  }\n});\nexport const {\n  FETCH_ALL,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE_POST\n} = postSlice.actions;\nexport default postSlice.reducer;\n\n// export const posts = createSlice(initialState, (builder) => {\n//   builder\n//     .addCase('FETCH_ALL', (state, action) => {\n//         return action.payload;\n//     })\n//     .addCase('CREATE', (state, action) => {\n//         return [state, action.payload];\n//     })\n//     .addCase('UPDATE', (state, action) => {\n//         return state.filter((post) => post._id !== action.payload);\n//     })\n//     .addCase('DELETE', (state, action) => {\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     })\n//     .addCase('LIKE_POST', (state, action) => {\n//         return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\n//     })\n// })\n\n// action.payload is used to receive paramiters or value from the user \n// export const posts = createReducer([],{\n//     FETCH_ALL: (state, action) =>{\n//         return action.payload;\n//     },\n//     CREATE: (state, action) =>{\n//         return [state, action.payload];\n//     },\n//     UPDATE: (state, action) =>{\n//         return state.filter((post) => post._id !== action.payload);\n//     },\n//     DELETE: (state, action) =>{\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n//     LIKE_POST: (state, action) =>{\n//         console.log(state);\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n// })","map":{"version":3,"names":["createSlice","initialState","postSlice","name","reducers","FETCH_ALL","state","action","payload","CREATE","UPDATE","filter","post","_id","DELETE","map","LIKE_POST","posts","actions","reducer"],"sources":["C:/Users/suraa/Documents/Ninja Notes/Node JS Workspace/MEMORIES-PROJECT/client/src/reducers/posts.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nconst postSlice = createSlice({\r\n    name: 'postSlice',\r\n    initialState,\r\n    reducers: {\r\n        FETCH_ALL(state, action) {\r\n            return action.payload;\r\n        },\r\n      CREATE(state, action) {\r\n        return [state, action.payload];\r\n    },\r\n    UPDATE(state, action) {\r\n        return state.filter((post) => post._id !== action.payload);\r\n    },\r\n    DELETE(state, action) {\r\n        return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n    },\r\n    LIKE_POST(state, action) {\r\n          return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\r\n      },\r\n    },\r\n  })\r\n  \r\n  export const { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE_POST } = postSlice.actions\r\n  export default postSlice.reducer\r\n\r\n// export const posts = createSlice(initialState, (builder) => {\r\n//   builder\r\n//     .addCase('FETCH_ALL', (state, action) => {\r\n//         return action.payload;\r\n//     })\r\n//     .addCase('CREATE', (state, action) => {\r\n//         return [state, action.payload];\r\n//     })\r\n//     .addCase('UPDATE', (state, action) => {\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     })\r\n//     .addCase('DELETE', (state, action) => {\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     })\r\n//     .addCase('LIKE_POST', (state, action) => {\r\n//         return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     })\r\n// })\r\n\r\n\r\n// action.payload is used to receive paramiters or value from the user \r\n// export const posts = createReducer([],{\r\n//     FETCH_ALL: (state, action) =>{\r\n//         return action.payload;\r\n//     },\r\n//     CREATE: (state, action) =>{\r\n//         return [state, action.payload];\r\n//     },\r\n//     UPDATE: (state, action) =>{\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     },\r\n//     DELETE: (state, action) =>{\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n//     LIKE_POST: (state, action) =>{\r\n//         console.log(state);\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n// })\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,EAAE;AAEvB,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,WAAW;EACjBF,YAAY;EACZG,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB,OAAOA,MAAM,CAACC,OAAO;IACzB,CAAC;IACHC,MAAM,CAACH,KAAK,EAAEC,MAAM,EAAE;MACpB,OAAO,CAACD,KAAK,EAAEC,MAAM,CAACC,OAAO,CAAC;IAClC,CAAC;IACDE,MAAM,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAClB,OAAOD,KAAK,CAACK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAAC;IAC9D,CAAC;IACDM,MAAM,CAACR,KAAK,EAAEC,MAAM,EAAE;MAClB,OAAOD,KAAK,CAACS,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAACK,GAAG,GAAGN,MAAM,CAACC,OAAO,GAAGF,KAAK,CAAC;IACxF,CAAC;IACDU,SAAS,CAACV,KAAK,EAAEC,MAAM,EAAE;MACnB,OAAOD,KAAK,CAACW,KAAK,CAACF,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAACK,GAAG,GAAGN,MAAM,CAACC,OAAO,GAAGF,KAAK,CAAC;IAC9F;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAED,SAAS;EAAEI,MAAM;EAAEC,MAAM;EAAEI,MAAM;EAAEE;AAAU,CAAC,GAAGd,SAAS,CAACgB,OAAO;AACjF,eAAehB,SAAS,CAACiB,OAAO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}