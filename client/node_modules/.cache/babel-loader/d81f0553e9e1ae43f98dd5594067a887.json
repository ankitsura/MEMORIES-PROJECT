{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  posts: []\n};\nconst postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    FETCH_ALL(state) {\n      state.value++;\n    },\n    CREATE(state) {\n      state.value--;\n    },\n    UPDATE(state, action) {\n      state.value += action.payload;\n    },\n    DELETE(state, action) {\n      state.value += action.payload;\n    },\n    LIKE(state, action) {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = postSlice.actions;\nexport default postSlice.reducer;\n\n// export const posts = createSlice(initialState, (builder) => {\n//   builder\n//     .addCase('FETCH_ALL', (state, action) => {\n//         return action.payload;\n//     })\n//     .addCase('CREATE', (state, action) => {\n//         return [state, action.payload];\n//     })\n//     .addCase('UPDATE', (state, action) => {\n//         return state.filter((post) => post._id !== action.payload);\n//     })\n//     .addCase('DELETE', (state, action) => {\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     })\n//     .addCase('LIKE_POST', (state, action) => {\n//         return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\n//     })\n// })\n\n// action.payload is used to receive paramiters or value from the user \n// export const posts = createReducer([],{\n//     FETCH_ALL: (state, action) =>{\n//         return action.payload;\n//     },\n//     CREATE: (state, action) =>{\n//         return [state, action.payload];\n//     },\n//     UPDATE: (state, action) =>{\n//         return state.filter((post) => post._id !== action.payload);\n//     },\n//     DELETE: (state, action) =>{\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n//     LIKE_POST: (state, action) =>{\n//         console.log(state);\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n// })","map":{"version":3,"names":["createSlice","initialState","posts","postSlice","name","reducers","FETCH_ALL","state","value","CREATE","UPDATE","action","payload","DELETE","LIKE","increment","decrement","incrementByAmount","actions","reducer"],"sources":["C:/Users/suraa/Documents/Ninja Notes/Node JS Workspace/MEMORIES-PROJECT/client/src/reducers/posts.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n   posts: [],\r\n};\r\n\r\nconst postSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        FETCH_ALL(state) {\r\n        state.value++\r\n      },\r\n      CREATE(state) {\r\n        state.value--\r\n      },\r\n      UPDATE(state, action) {\r\n        state.value += action.payload\r\n      },\r\n      DELETE(state, action) {\r\n        state.value += action.payload\r\n      },\r\n      LIKE(state, action) {\r\n        state.value += action.payload\r\n      },\r\n    },\r\n  })\r\n  \r\n  export const { increment, decrement, incrementByAmount } = postSlice.actions\r\n  export default postSlice.reducer\r\n\r\n// export const posts = createSlice(initialState, (builder) => {\r\n//   builder\r\n//     .addCase('FETCH_ALL', (state, action) => {\r\n//         return action.payload;\r\n//     })\r\n//     .addCase('CREATE', (state, action) => {\r\n//         return [state, action.payload];\r\n//     })\r\n//     .addCase('UPDATE', (state, action) => {\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     })\r\n//     .addCase('DELETE', (state, action) => {\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     })\r\n//     .addCase('LIKE_POST', (state, action) => {\r\n//         return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     })\r\n// })\r\n\r\n\r\n// action.payload is used to receive paramiters or value from the user \r\n// export const posts = createReducer([],{\r\n//     FETCH_ALL: (state, action) =>{\r\n//         return action.payload;\r\n//     },\r\n//     CREATE: (state, action) =>{\r\n//         return [state, action.payload];\r\n//     },\r\n//     UPDATE: (state, action) =>{\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     },\r\n//     DELETE: (state, action) =>{\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n//     LIKE_POST: (state, action) =>{\r\n//         console.log(state);\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n// })\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAClBC,KAAK,EAAE;AACV,CAAC;AAED,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC1BI,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAK,EAAE;MACjBA,KAAK,CAACC,KAAK,EAAE;IACf,CAAC;IACDC,MAAM,CAACF,KAAK,EAAE;MACZA,KAAK,CAACC,KAAK,EAAE;IACf,CAAC;IACDE,MAAM,CAACH,KAAK,EAAEI,MAAM,EAAE;MACpBJ,KAAK,CAACC,KAAK,IAAIG,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDC,MAAM,CAACN,KAAK,EAAEI,MAAM,EAAE;MACpBJ,KAAK,CAACC,KAAK,IAAIG,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDE,IAAI,CAACP,KAAK,EAAEI,MAAM,EAAE;MAClBJ,KAAK,CAACC,KAAK,IAAIG,MAAM,CAACC,OAAO;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,SAAS;EAAEC,SAAS;EAAEC;AAAkB,CAAC,GAAGd,SAAS,CAACe,OAAO;AAC5E,eAAef,SAAS,CAACgB,OAAO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}