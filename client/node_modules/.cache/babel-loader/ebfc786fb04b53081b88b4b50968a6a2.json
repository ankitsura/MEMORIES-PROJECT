{"ast":null,"code":"import { createReducer } from \"@reduxjs/toolkit\";\nimport { useSelector } from 'react-redux';\n\n// initial state of allPosts\nconst allPosts = [];\nconst deletePost = useSelector(state => state.posts);\n\n// action.payload is used to receive paramiters or value from the user \nexport const posts = createReducer(allPosts, {\n  FETCH_ALL: (state, action) => {\n    return action.payload;\n  },\n  CREATE: (state, action) => {\n    return [...allPosts, action.payload];\n  },\n  UPDATE: (state, action) => {\n    return allPosts.filter(post => post.id !== action.payload);\n  },\n  DELETE: (state, action) => {\n    return state.posts.map(post => post._id === action.payload._id ? action.payload : allPosts);\n  },\n  LIKE_POST: (state, action) => {\n    return allPosts.map(post => post._id === action.payload._id ? action.payload : allPosts);\n  }\n});","map":{"version":3,"names":["createReducer","useSelector","allPosts","deletePost","state","posts","FETCH_ALL","action","payload","CREATE","UPDATE","filter","post","id","DELETE","map","_id","LIKE_POST"],"sources":["C:/Users/suraa/Documents/Ninja Notes/Node JS Workspace/MEMORIES-PROJECT/client/src/reducers/posts.js"],"sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { useSelector } from 'react-redux';\r\n\r\n// initial state of allPosts\r\nconst allPosts = [];\r\nconst deletePost = useSelector((state) => state.posts);\r\n\r\n// action.payload is used to receive paramiters or value from the user \r\nexport const posts = createReducer(allPosts,{\r\n    FETCH_ALL: (state, action) =>{\r\n        return action.payload;\r\n    },\r\n    CREATE: (state, action) =>{\r\n        return [...allPosts, action.payload];\r\n    },\r\n    UPDATE: (state, action) =>{\r\n        return allPosts.filter((post) => post.id !== action.payload);\r\n    },\r\n    DELETE: (state, action) =>{\r\n        return state.posts.map((post) => post._id === action.payload._id ? action.payload : allPosts);\r\n    },\r\n    LIKE_POST: (state, action) =>{\r\n        return allPosts.map((post) => post._id === action.payload._id ? action.payload : allPosts);\r\n    },\r\n})\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,MAAMC,QAAQ,GAAG,EAAE;AACnB,MAAMC,UAAU,GAAGF,WAAW,CAAEG,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC;;AAEtD;AACA,OAAO,MAAMA,KAAK,GAAGL,aAAa,CAACE,QAAQ,EAAC;EACxCI,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAI;IACzB,OAAOA,MAAM,CAACC,OAAO;EACzB,CAAC;EACDC,MAAM,EAAE,CAACL,KAAK,EAAEG,MAAM,KAAI;IACtB,OAAO,CAAC,GAAGL,QAAQ,EAAEK,MAAM,CAACC,OAAO,CAAC;EACxC,CAAC;EACDE,MAAM,EAAE,CAACN,KAAK,EAAEG,MAAM,KAAI;IACtB,OAAOL,QAAQ,CAACS,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAACC,OAAO,CAAC;EAChE,CAAC;EACDM,MAAM,EAAE,CAACV,KAAK,EAAEG,MAAM,KAAI;IACtB,OAAOH,KAAK,CAACC,KAAK,CAACU,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACI,GAAG,KAAKT,MAAM,CAACC,OAAO,CAACQ,GAAG,GAAGT,MAAM,CAACC,OAAO,GAAGN,QAAQ,CAAC;EACjG,CAAC;EACDe,SAAS,EAAE,CAACb,KAAK,EAAEG,MAAM,KAAI;IACzB,OAAOL,QAAQ,CAACa,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACI,GAAG,KAAKT,MAAM,CAACC,OAAO,CAACQ,GAAG,GAAGT,MAAM,CAACC,OAAO,GAAGN,QAAQ,CAAC;EAC9F;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}