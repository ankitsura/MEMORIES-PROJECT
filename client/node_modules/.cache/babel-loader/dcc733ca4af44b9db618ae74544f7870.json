{"ast":null,"code":"import { createReducer, createAction } from \"@reduxjs/toolkit\";\nconst FETCH_ALL = createAction('FETCH_ALL');\nconst FETCH_BY_SEARCH = createAction('FETCH_BY_SEARCH');\nconst CREATE = createAction('CREATE');\nconst UPDATE = createAction('UPDATE');\nconst DELETE = createAction('DELETE');\nconst LIKE_POST = createAction('LIKE_POST');\nconst START_LOADING = createAction('START_LOADING');\nconst END_LOADING = createAction('END_LOADING');\nconst initialState = [];\nexport const posts = createReducer(initialState, builder => {\n  builder.addCase(FETCH_ALL, (state, action) => {\n    return {\n      ...state,\n      posts: action.payload.data,\n      currentPage: action.payload.currentPage,\n      numberOfPages: action.payload.numberOfPages\n    };\n  }).addCase(FETCH_BY_SEARCH, (state, action) => {\n    return {\n      ...state,\n      posts: action.payload\n    };\n  }).addCase(CREATE, (state, action) => {\n    return [...state, action.payload];\n  }).addCase(UPDATE, (state, action) => {\n    return state.map(post => post._id === action.payload._id ? action.payload : post);\n  }).addCase(DELETE, (state, action) => {\n    return state.filter(post => post._id !== action.payload);\n  }).addCase(LIKE_POST, (state, action) => {\n    return state.map(post => post._id === action.payload._id ? action.payload : post);\n  }).addCase(START_LOADING, (state, action) => {\n    return {\n      ...state,\n      is\n    };\n  }).addCase(END_LOADING, (state, action) => {\n    return state.map(post => post._id === action.payload._id ? action.payload : post);\n  });\n});\n// const postSlice = createSlice({\n//     initialState,\n//     reducers: {\n//         FETCH_ALL(state, action) {\n//             return action.payload;\n//         },\n//       CREATE(state, action) {\n//         return [state, action.payload];\n//     },\n//     UPDATE(state, action) {\n//         return state.filter((post) => post._id !== action.payload);\n//     },\n//     DELETE(state, action) {\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n//     LIKE_POST(state, action) {\n//           return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\n//       },\n//     },\n//   })\n\n//   export default postSlice.reducer;\n\n// action.payload is used to receive paramiters or value from the user \n// export const posts = createReducer([],{\n//     FETCH_ALL: (state, action) =>{\n//         return action.payload;\n//     },\n//     CREATE: (state, action) =>{\n//         return [state, action.payload];\n//     },\n//     UPDATE: (state, action) =>{\n//         return state.filter((post) => post._id !== action.payload);\n//     },\n//     DELETE: (state, action) =>{\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n//     LIKE_POST: (state, action) =>{\n//         console.log(state);\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\n//     },\n// })","map":{"version":3,"names":["createReducer","createAction","FETCH_ALL","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE_POST","START_LOADING","END_LOADING","initialState","posts","builder","addCase","state","action","payload","data","currentPage","numberOfPages","map","post","_id","filter","is"],"sources":["C:/Users/suraa/Documents/Ninja Notes/Node JS Workspace/MEMORIES-PROJECT/client/src/reducers/postsReducer.js"],"sourcesContent":["import { createReducer, createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst FETCH_ALL = createAction('FETCH_ALL');\r\nconst FETCH_BY_SEARCH = createAction('FETCH_BY_SEARCH');\r\nconst CREATE = createAction('CREATE');\r\nconst UPDATE = createAction('UPDATE');\r\nconst DELETE = createAction('DELETE');\r\nconst LIKE_POST = createAction('LIKE_POST');\r\nconst START_LOADING = createAction('START_LOADING');\r\nconst END_LOADING = createAction('END_LOADING');\r\n\r\nconst initialState = [];\r\n\r\nexport const posts = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(FETCH_ALL, (state, action) => {\r\n        return {\r\n            ...state,\r\n            posts: action.payload.data,\r\n            currentPage: action.payload.currentPage,\r\n            numberOfPages: action.payload.numberOfPages\r\n        };\r\n    })\r\n    .addCase(FETCH_BY_SEARCH, (state, action) => {\r\n        return {\r\n            ...state,\r\n            posts: action.payload\r\n        };\r\n    })\r\n    .addCase(CREATE, (state, action) => {\r\n        return [...state, action.payload];\r\n    })\r\n    .addCase(UPDATE, (state, action) => {\r\n        return state.map((post) => post._id === action.payload._id ? action.payload : post);\r\n    })\r\n    .addCase(DELETE, (state, action) => {\r\n        return state.filter((post) => post._id !== action.payload);\r\n    })\r\n    .addCase(LIKE_POST, (state, action) => {\r\n        return state.map((post) => post._id === action.payload._id ? action.payload : post);\r\n    })\r\n    .addCase(START_LOADING, (state, action) => {\r\n        return {...state, is}\r\n    })\r\n    .addCase(END_LOADING, (state, action) => {\r\n        return state.map((post) => post._id === action.payload._id ? action.payload : post);\r\n    })\r\n})\r\n// const postSlice = createSlice({\r\n//     initialState,\r\n//     reducers: {\r\n//         FETCH_ALL(state, action) {\r\n//             return action.payload;\r\n//         },\r\n//       CREATE(state, action) {\r\n//         return [state, action.payload];\r\n//     },\r\n//     UPDATE(state, action) {\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     },\r\n//     DELETE(state, action) {\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n//     LIKE_POST(state, action) {\r\n//           return state.posts.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//       },\r\n//     },\r\n//   })\r\n  \r\n//   export default postSlice.reducer;\r\n\r\n\r\n\r\n// action.payload is used to receive paramiters or value from the user \r\n// export const posts = createReducer([],{\r\n//     FETCH_ALL: (state, action) =>{\r\n//         return action.payload;\r\n//     },\r\n//     CREATE: (state, action) =>{\r\n//         return [state, action.payload];\r\n//     },\r\n//     UPDATE: (state, action) =>{\r\n//         return state.filter((post) => post._id !== action.payload);\r\n//     },\r\n//     DELETE: (state, action) =>{\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n//     LIKE_POST: (state, action) =>{\r\n//         console.log(state);\r\n//         return state.map((post) => post._id === action.payload._id ? action.payload : state);\r\n//     },\r\n// })\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}